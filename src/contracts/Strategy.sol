// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

pragma solidity ^0.8.12;
pragma experimental ABIEncoderV2;

// DN Math Library
import {DeltaNeutralMathLib} from "../../lib/dn-chad-math/DeltaNeutralMathLib.sol";
import {DeltaNeutralMetadata} from "../../lib/dn-chad-math/DeltaNeutralMathLib.sol";

// Import Homora Farm Functions
import {HomoraFarmHandler} from "../contracts/homora/HomoraFarmHandler.sol";

// These are the core Yearn libraries
import {BaseStrategy, StrategyParams} from "./yearn/BaseStrategy.sol";
import "../interfaces/IHomoraFarmHandler.sol";
import "../interfaces/oracle/IConcaveOracle.sol";

import {Address} from "@openzeppelin/contracts/utils/Address.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "./interfaces/<protocol>/<Interface>.sol";
import "../interfaces/ISwapperImpl.sol";

contract Strategy is BaseStrategy, HomoraFarmHandler {
    using SafeERC20 for IERC20;
    using Address for address;
    using DeltaNeutralMathLib for DeltaNeutralMetadata;

    uint private constant MULTIPLIER = 10000; // (10000 = 100% = 1)

    // The token pairs which will go into the Homora Farm
    address public homoraFarmHandler;
    address public swapper;
    address private token0;
    address private token1;
    uint private farmLeverage;
    uint private longPositionId;
    uint private shortPositionId;

    // solhint-disable-next-line no-empty-blocks
    constructor(
        address _vault,
        address _homoraBank,
        address _sushiSwapSpell,
        address _token0,
        address _token1,
        address _swapper,
        uint _farmLeverage
    ) BaseStrategy(_vault) 
    HomoraFarmHandler(_homoraBank, _sushiSwapSpell) 
    {
        // You can set these parameters on deployment to whatever you want
        // maxReportDelay = 6300;
        // profitFactor = 100;
        // debtThreshold = 0;

        token0 = _token0;
        token1 = _token1;
        farmLeverage = _farmLeverage;
        swapper = _swapper;
        longPositionId = 0;
        shortPositionId = 0;
    }

    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {
        // Add your own name here, suggestion e.g. "StrategyCreamYFI"
        return "Strategy<ProtocolName><TokenType>";
    }

    // Balances of the tokens in the strategy + value of the 2 DN positions open
    function estimatedTotalAssets() public view override returns (uint256) {
        return want.balanceOf(address(this)) +
            getCollateralETHValue(longPositionId) +
            getCollateralETHValue(shortPositionId) -
            getBorrowETHValue(longPositionId) - 
            getBorrowETHValue(shortPositionId);
    }

    function prepareReturn(uint256 _debtOutstanding)
        internal
        override
        returns (
            uint256 _profit,
            uint256 _loss,
            uint256 _debtPayment
        )
    // solhint-disable-next-line no-empty-blocks
    {
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position

        IHomoraFarmHandler(homoraFarmHandler).harvestSushiswap(longPositionId);
        IHomoraFarmHandler(homoraFarmHandler).harvestSushiswap(shortPositionId);

        uint256 amountIn = IHomoraFarmHandler(homoraFarmHandler).getSushi().balanceOf(address(this));
        ISwapperImpl(swapper).swap(amountIn, address(this));

        uint256 totalAssets = estimatedTotalAssets();
        uint256 totalDebt = vault.strategies(address(this)).totalDebt;
        if (totalAssets > _debtOutstanding) {
            _debtPayment = _debtOutstanding;
            totalAssets = totalAssets - _debtOutstanding;
        } else {
            _debtPayment = totalAssets;
            totalAssets = 0;
        }
        totalDebt = totalDebt - _debtPayment;

        if (totalAssets > totalDebt) {
            _profit = totalAssets - totalDebt;
        } else {
            _loss = totalDebt - totalAssets;
        }
    }

    // ******** AUTHOR 0xQuasar ******** //
    // * Prepare for the DN rebalancing // 
    // * No Harvesting from the Farms, save on some gas. 
    // * 
    // * When tending always pay back the amount the vault wants in debtOutstanding\
    // * Profits and losses are the figures since the last report 
    // debtOutstanding is how much the vault expects the strategy to pay back
    function prepareRebalance(uint256 _debtOutstanding) 
        internal 
        override
        returns (
            uint256 _profit, // Gain goes towards totalAvail
            uint256 _loss, // Loss results in less debt ratio and less locked profit
            uint256 _debtPayment // in the vault report() function: Min(debtOutstanding, debtPayment)
        ) 
    {   // totalAvail = profit + debtpayment | creditAvail = how much the vault is under debt limit | Only looks at the harvest pot

        // Pay back the vault when the debt limit goes down - yes
        // Take more money from the vault? - No that is taken care of in def report()
        uint256 totalAssets = estimatedTotalAssets();
        uint256 totalDebt   = vault.strategies(address(this)).totalDebt;

        if (totalAssets > totalDebt) {
            _profit = totalAssets - totalDebt;
        } else {
            _loss = totalDebt - totalAssets;
        }
        _debtPayment = _debtOutstanding;
    }

    // Add: Function to change the farm leverage // TODO 

    // ********* For Homora - Sushiswap ********** 
    // solhint-disable-next-line no-empty-blocks
    function adjustPosition(uint256 _debtOutstanding) internal override {
        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)
        
        DeltaNeutralMetadata memory data;

        {
            // Values in ETH
            uint256 longLoanValue    = getBorrowETHValue(longPositionId);
            uint256 shortLoanValue   = getBorrowETHValue(shortPositionId);
            uint256 longEquityValue  = getCollateralETHValue(longPositionId) - longLoanValue;
            uint256 shortEquityValue = getCollateralETHValue(shortPositionId) - shortLoanValue;

            data = DeltaNeutralMetadata(
                longEquityValue,
                longLoanValue,
                shortEquityValue,
                shortLoanValue,
                0,  // No harvest in tend function
                farmLeverage
            );
        }
        
        // All values here valuated in ETH
        uint256 desiredAdjustment = data.getDesiredAdjustment();
        (uint256 longPositionEquityAdjust, bool addToLongEquity) = data.longEquityRebalance(desiredAdjustment, _debtOutstanding);
        (uint256 longPositionLoanAdjust, bool addToLongLoan) = data.longLoanRebalance(desiredAdjustment, _debtOutstanding);
        (uint256 shortPositionEquityAdjust, bool addToShortEquity) = data.shortEquityRebalance(desiredAdjustment, _debtOutstanding);
        (uint256 shortPositionLoanAdjust, bool addToShortLoan) = data.shortLoanRebalance(desiredAdjustment, _debtOutstanding);

        // TODO: Need to convert the ETH values to token values using the oracle Impl
        //uint256 longPositionEquityToken1 = ;


        // One position will need reduction, the other will need addition
        // Call Reduce Position


        // Call Add Position
        // Position Long
        uint256 longPositionIdReturn = openOrIncreasePositionSushiswap(
                longPositionId, 
                token0,
                token1,
                longPositionEquityAdjust, // amountToken0
                0, // amountToken1 will be 0
                0, // 0 LP Supplied
                longPositionLoanAdjust,
                0, // 0 Borrrow of token1
                0 // Place in the Sushiswap PID
        );
        // Rebalancing: Say Eth price goes up
        // This farm is underlevereaged now

        // Position Two
        uint256 shortPositionIdReturn = openOrIncreasePositionSushiswap(
                shortPositionId, 
                token0,
                token1,
                shortPositionEquityAdjust,
                0,
                0, // 0 Supply of LP
                0, // 0 Borrow of token0
                shortPositionLoanAdjust,
                0 // Place in the Sushiswap PID
        );
        // This farm is overleveraged in the case ETH price goes up
        // Need to move funds from this position into long position 
        // Harvesting: 2 goals: (1) Maintain ratio of the base assets in the positions
        // (2) Maintain the farm leverage
        // Rebalance action: (1) Pull liquidity from one farm and deposit in other
        // (2) Take out loans in the one that got liquidity pulled
        // NOTE: Reduce the underleverage farm supply without 
        // Paying the loan back. This will reduce number of actions. 
        // 
        // Rebalance trigger conditions on chain
        // Rebalance calcs & mechanism also on chain
        // Condition detection can happen off chain in a bot

        // Update the position IDs if opening new DN positions
        if (longPositionId == 0 && shortPositionId == 0) {
            longPositionId = longPositionIdReturn;
            shortPositionId = shortPositionIdReturn;
        } 

    }

    function addToPosition(uint256 _debtOutstanding) internal override {
        // Get these values all from a homora view function
        uint longEquityValue;
        uint longLoanValue;
        uint shortEquityValue;
        uint shortLoanValue; 
        uint256 harvestValue = (IHomoraFarmHandler(homoraFarmHandler)
            .getPendingRewardForSushiswap(longPositionId) +
            IHomoraFarmHandler(homoraFarmHandler).getPendingRewardForSushiswap(
                    shortPositionId
                ) +
            want.balanceOf(address(this))) *
            IHomoraFarmHandler(homoraFarmHandler).getETHPx(address(want));

        DeltaNeutralMetadata memory data = DeltaNeutralMetadata(
            longEquityValue,
            longLoanValue,
            shortEquityValue,
            shortLoanValue,
            harvestValue,
            farmLeverage
        );

        uint desiredAdjustment = data.getDesiredAdjustment();
        uint longEquityAdd = data.getLongEquityAdd(desiredAdjustment);
        uint longLoanAdd = data.getLongLoanAdd(desiredAdjustment);
        uint shortEquityAdd = data.getShortEquityAdd(desiredAdjustment);
        uint shortLoadAdd = data.getShortLoanAdd(desiredAdjustment);

        // Call Add Position
        // Position Long
        uint longPositionIdReturn = IHomoraFarmHandler(homoraFarmHandler).openOrIncreasePositionSushiswap(
                longPositionId, 
                token0,
                token1,
                longEquityAdd, // amountToken0
                0, // amountToken1 will be 0
                0, // 0 LP Supplied
                longLoanAdd,
                0, // 0 Borrrow of token1
                0 // Place in the Sushiswap PID
        );
        // Rebalancing: Say Eth price goes up
        // This farm is underlevereaged now

        // Position Two
        uint shortPositionIdReturn = IHomoraFarmHandler(homoraFarmHandler).openOrIncreasePositionSushiswap(
                shortPositionId, 
                token0,
                token1,
                shortEquityAdd,
                0,
                0, // 0 Supply of LP
                0, // 0 Borrow of token0
                shortLoadAdd,
                0 // Place in the Sushiswap PID
        );

        // Update the position IDs if opening new DN positions
        if (longPositionId == 0 && shortPositionId == 0) {
            longPositionId = longPositionIdReturn;
            shortPositionId = shortPositionIdReturn;
        }
    }

    function liquidatePosition(uint256 _amountNeeded)
        internal
        override
        returns (uint256 _liquidatedAmount, uint256 _loss)
    {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        uint256 totalAssets = estimatedTotalAssets();
        uint256 lpRemoveProportion;

        if (_amountNeeded > totalAssets) {
            _liquidatedAmount = totalAssets;
            lpRemoveProportion = MULTIPLIER; // 100%
            unchecked {
                _loss = _amountNeeded - totalAssets;
            }
        } else {
            _liquidatedAmount = _amountNeeded;
            lpRemoveProportion = _liquidatedAmount * MULTIPLIER / totalAssets;
        }

        // Remove the LPs in proportion to _amountNeeded / totalAssets
        // (50% from the long position, 50% from the short position)

        uint256 longLpTokenAmount = 0;
        uint256 shortLpTokenAmount = 0;
        
        (,,,longLpTokenAmount) = getPositionInfo(longPositionId);
        (,,,shortLpTokenAmount) = getPositionInfo(shortPositionId);

        // Payment of debts is in proportion to the farm leverage

        uint256 removeLongLpAmount = longLpTokenAmount * lpRemoveProportion / (2 * MULTIPLIER);
        uint256 removeShortLpAmount = shortLpTokenAmount * lpRemoveProportion / (2 * MULTIPLIER);

        // AmtTake should be equal to AmtWithdraw - if they're unequal we would
        // End up with LP tokens instead of token0 and token1
        // Do a full repay on the position
        reducePositionSushiswap(
            longPositionId, 
            token0, 
            token1, 
            removeLongLpAmount,  //amtTake
            removeLongLpAmount,  //amtWithdraw
            0, 
            0, // Repay the amounts in LP Token
            (removeLongLpAmount - removeLongLpAmount / farmLeverage)
        );

        reducePositionSushiswap(
            shortPositionId, 
            token0, 
            token1, 
            removeShortLpAmount, //amtTake
            removeShortLpAmount, //amtWithdraw
            0, 
            0,
            (removeShortLpAmount - removeLongLpAmount / farmLeverage)
        );

        // TODO: swap the token 1 into token 0 here

    }

    function liquidateAllPositions() internal override returns (uint256) {
        // TODO: Liquidate all positions and return the amount freed.
        // Ask Homora if there is a simpler liquidate all function to run
        
        (, , , uint longLpTokenAmount) = getPositionInfo(longPositionId);
        (, , , uint shortLpTokenAmount) = getPositionInfo(shortPositionId);
        
        uint[] memory longDebtAmounts = new uint[](2);
        uint[] memory shortDebtAmounts = new uint[](2);
        (,longDebtAmounts) = getPositionDebts(longPositionId);
        (,shortDebtAmounts) = getPositionDebts(shortPositionId);

        // AmtTake should be equal to AmtWithdraw - if they're unequal we would
        // End up with LP tokens instead of token0 and token1
        // Do a full repay on the position
        reducePositionSushiswap(
            longPositionId, 
            token0, 
            token1, 
            longLpTokenAmount,  //amtTake
            longLpTokenAmount,  //amtWithdraw
            longDebtAmounts[0], 
            longDebtAmounts[1],
            0 // No LP Repay
        );

        reducePositionSushiswap(
            shortPositionId, 
            token0, 
            token1, 
            shortLpTokenAmount, //amtTake
            shortLpTokenAmount, //amtWithdraw
            shortDebtAmounts[0], 
            shortDebtAmounts[1],
            0 // No LP Repay
        );

        // TODO: swap the token 1 into token 0 here

        return want.balanceOf(address(this));
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary
    // solhint-disable-next-line no-empty-blocks
    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
    }

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    //
    // Example:
    //
    //    function protectedTokens() internal override view returns (address[] memory) {
    //      address[] memory protected = new address[](3);
    //      protected[0] = tokenA;
    //      protected[1] = tokenB;
    //      protected[2] = tokenC;
    //      return protected;
    //    }
    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    // solhint-disable-next-line no-empty-blocks
    {

    }

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(uint256 _amtInWei)
        public
        view
        virtual
        override
        returns (uint256)
    {
        // TODO create an accurate price oracle
        return _amtInWei;
    }

}
